[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.630860",
  "module": "Sanskar HRMS",
  "name": "Custom Submit Feedback button in Interview",
  "script": "frappe.ui.form.on('Interview', {\n\n\trefresh:function(frm) {\n\t\t\n\t\t// Hide Default 'Submit Feedback' Button\n        $('[data-label=\"Submit%20Feedback\"]').hide();\n        \n      \n        \n        frm.trigger(\"add_custom_buttons\");\n        \n        \n        \n        \n\t},\n\tadd_custom_buttons: function(frm) {\n\t    \n\t    frm.add_custom_button(__(\"Submit Interview Feedback\"), function() {\n        \n       \n        \n        frappe.call({\n\t\t\tmethod:\n\t\t\t\t\"hrms.hr.doctype.interview.interview.get_expected_skill_set\",\n\t\t\targs: {\n\t\t\t\tinterview_round: frm.doc.interview_round,\n\t\t\t},\n\t\t\tcallback: function (r) {\n\t\t\t\tfrm.events.show_feedback_dialog(frm, r.message);\n\t\t\t\tfrm.refresh();\n\t\t\t},\n\t\t});\n        \n        \n    });\n\t},\n\t\n\t\n\tshow_feedback_dialog: function (frm, data) {\n\t\tlet fields = frm.events.get_fields_for_feedback();\n\n\t\tlet d = new frappe.ui.Dialog({\n\t\t\ttitle: __(\"Submit Feedback\"),\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tfieldname: \"skill_set\",\n\t\t\t\t\tfieldtype: \"Table\",\n\t\t\t\t\tlabel: __(\"Skill Assessment\"),\n\t\t\t\t\tcannot_add_rows: false,\n\t\t\t\t\tin_editable_grid: true,\n\t\t\t\t\treqd: 1,\n\t\t\t\t\tfields: fields,\n\t\t\t\t\tdata: data,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldname: \"result\",\n\t\t\t\t\tfieldtype: \"Select\",\n\t\t\t\t\toptions: [\"\", \"Cleared\", \"Rejected\"],\n\t\t\t\t\tlabel: __(\"Result\"),\n\t\t\t\t\treqd: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldname: \"feedback\",\n\t\t\t\t\tfieldtype: \"Small Text\",\n\t\t\t\t\tlabel: __(\"Feedback\"),\n\t\t\t\t},\n\t\t\t],\n\t\t\tsize: \"large\",\n\t\t\tminimizable: true,\n\t\t\tstatic: true,\n\t\t\tprimary_action: function (values) {\n\t\t\t\tfrappe\n\t\t\t\t\t.call({\n\t\t\t\t\t\tmethod:\n\t\t\t\t\t\t\t\"hrms.hr.doctype.interview.interview.create_interview_feedback\",\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\tdata: values,\n\t\t\t\t\t\t\tinterview_name: frm.doc.name,\n\t\t\t\t\t\t\tinterviewer: frappe.session.user,\n\t\t\t\t\t\t\tjob_applicant: frm.doc.job_applicant,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tfrm.refresh();\n\t\t\t\t\t});\n\t\t\t\td.hide();\n\t\t\t},\n\t\t});\n\t\td.show();\n\t\td.get_close_btn().show();\n\t},\n\n\tget_fields_for_feedback: function () {\n\t\treturn [\n\t\t\t{\n\t\t\t\tfieldtype: \"Link\",\n\t\t\t\tfieldname: \"skill\",\n\t\t\t\toptions: \"Skill\",\n\t\t\t\tin_list_view: 1,\n\t\t\t\tlabel: __(\"Skill\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Rating\",\n\t\t\t\tfieldname: \"rating\",\n\t\t\t\tlabel: __(\"Rating\"),\n\t\t\t\tin_list_view: 1,\n\t\t\t\treqd: 1,\n\t\t\t},\n\t\t];\n\t},\n\n})\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.753238",
  "module": "Sanskar HRMS",
  "name": "Job_applicant status change",
  "script": "frappe.ui.form.on('Interview', {\n\tonload: function(frm) {\n\t    \n\t     var round = frm.doc.custom_round;\n\t     if (round=='1st Interview Round'){\n\t          frm.set_df_property('status', 'options', ['Scheduled', 'Rescheduled','Task Given', 'Cleared', 'Rejected', 'Not Appeared'])\n\t     }\n\t     else{\n\t         frm.set_df_property('status', 'options', ['Scheduled', 'Rescheduled', 'Cleared', 'Rejected', 'Not Appeared'])\n\t     }\n\t     \n\t},\n\tcustom_round: function(frm)\n\t{\n\n         var round = frm.doc.custom_round;\n\t     if (round=='1st Interview Round'){\n\t          frm.set_df_property('status', 'options', ['Scheduled', 'Rescheduled','Task Given', 'Cleared', 'Rejected', 'Not Appeared'])\n\t     }\n\t     else{\n\t         frm.set_df_property('status', 'options', ['Scheduled', 'Rescheduled', 'Cleared', 'Rejected', 'Not Appeared'])\n\t     }\n\n\t},\n\t\n\tstatus: function(frm) {\n\t    //If the Reschedule status is select then showing a dialog to update interview reschedule date, from time and to_time\n\t    \n\t    if (frm.doc.status == \"Rescheduled\") \n\t    {\n\t       var d = new frappe.ui.Dialog({\n    \t\t\ttitle: \"Reschedule Interview\",\n    \t\t\tfields: [\n    \t\t\t\t{\n    \t\t\t\t\tlabel: \"Schedule On\",\n    \t\t\t\t\tfieldname: \"scheduled_on\",\n    \t\t\t\t\tfieldtype: \"Date\",\n    \t\t\t\t\treqd: 1,\n    \t\t\t\t\tdefault: frm.doc.scheduled_on,\n    \t\t\t\t},\n    \t\t\t\t{\n    \t\t\t\t\tlabel: \"From Time\",\n    \t\t\t\t\tfieldname: \"from_time\",\n    \t\t\t\t\tfieldtype: \"Time\",\n    \t\t\t\t\treqd: 1,\n    \t\t\t\t\tdefault: frm.doc.from_time,\n    \t\t\t\t},\n    \t\t\t\t{\n    \t\t\t\t\tlabel: \"To Time\",\n    \t\t\t\t\tfieldname: \"to_time\",\n    \t\t\t\t\tfieldtype: \"Time\",\n    \t\t\t\t\treqd: 1,\n    \t\t\t\t\tdefault: frm.doc.to_time,\n    \t\t\t\t},\n    \t\t\t],\n    \t\t\tprimary_action_label: \"Reschedule\",\n    \t\t\tprimary_action(values) {\n    \t\t\t\tfrm.call({\n    \t\t\t\t\t\tmethod: \"reschedule_interview\",\n    \t\t\t\t\t\tdoc: frm.doc,\n    \t\t\t\t\t\targs: {\n    \t\t\t\t\t\t\tscheduled_on: values.scheduled_on,\n    \t\t\t\t\t\t\tfrom_time: values.from_time,\n    \t\t\t\t\t\t\tto_time: values.to_time,\n    \t\t\t\t\t\t},\n    \t\t\t\t\t})\n    \t\t\t\t\t.then(() => {\n    \t\t\t\t\t\tfrm.refresh();\n    \t\t\t\t\t\td.hide();\n    \t\t\t\t\t\tfrm.save();\n    \t\t\t\t\t});\n    \t\t\t},\n    \t\t});\n    \t\td.show();\n    \t\t\n\t    }\n\t    \n\t}\n// \tafter_save(frm)\n// \t{\n// \t    if (frm.doc.interview_round === 'Telephonic Round')\n// \t    {\n// \t        status_list = ['Approved by HR', 'Rejected by HR']\n// \t    }\n// \t    else\n// \t    {\n// \t        status_list = ['Cleared']\n// \t    }\n\t    \n\t   \n// \t       // checking if status does not include in below list \n// \t    if (!status_list.includes(frm.doc.status))\n// \t    {\n// \t        // if status does not include in abbove list then using frappe.call function to call server script which will change status in \n// \t        //job applicant doctype\n// \t        // passing interview status to be set in job applicant and job applicant id \n// \t        frappe.call({\n\t            \n// \t            method: 'job applicant status change',\n// \t            args : {\n// \t                'interview_status': `${frm.doc.interview_round} - ${frm.doc.status}`,\n// \t                'status': frm.doc.status,\n// \t                'interview_round': frm.doc.interview_round,\n// \t                'job_applicant': frm.doc.job_applicant\n\t                \n// \t            }\n// \t        });\n// \t    }\n\t    \n// \t    // Changing Status Color Based on status\n\t    \n\t    \n\t    \n// \t},\n\t\n// \ton_submit: function(frm)\n// \t{\n// \t    if (frm.doc.interview_round === 'Telephonic Round')\n// \t    {\n// \t        status_list = ['Approved by HR', 'Rejected by HR']\n// \t    }\n// \t    else\n// \t    {\n// \t        status_list = ['Cleared']\n// \t    }\n// \t   // Checking Status includes in below list or not\n// \t    if (status_list.includes(frm.doc.status))\n// \t    {\n// \t        console.log(\"On_submit\")\n// \t        // If status exists in the above list then using frappe.call to call server script which will upate job applicant status\n// \t        // passing interview status to be set in job applicant and job applicant id \n// \t        frappe.call({\n\t            \n// \t            method: 'job applicant status change',\n// \t            args : {\n// \t                'interview_status': `${frm.doc.interview_round} - ${frm.doc.status}`,\n// \t                'status': frm.doc.status,\n// \t                'interview_round': frm.doc.interview_round,\n// \t                'job_applicant': frm.doc.job_applicant\n\t                \n// \t            }\n// \t        });\n// \t    }\n\t   \n\t   \n// \t}\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.816255",
  "module": "Sanskar HRMS",
  "name": "Set Confirmation Date in Employee",
  "script": "frappe.ui.form.on('Employee', {\n\tbefore_save(frm) {\n\t    \n\t    var doj = frm.doc.date_of_joining;\n\t\tvar training_probation_months = frm.doc.custom_training_probation_period;\n\t\n\t\t\n\t\tif(doj && training_probation_months){\n\t\t    var training_probation_days = training_probation_months*60;\n\t\t    var confirm_date = frappe.datetime.add_days(doj, training_probation_days);\n\t\t    \n\t\t    frm.set_value('custom_confirmation_date',confirm_date);\n\t\t    frm.refresh_field('custom_confirmation_date')\n\t\t    \n\t\t}\n// \t\tfrm.save();\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Appointment Letter",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.787366",
  "module": "Sanskar HRMS",
  "name": "Calculate Annual CTC in Appointment Letter",
  "script": "frappe.ui.form.on('Appointment Letter', {\n\tcustom_employee:function(frm) {\n\t\tvar ctc_monthly = frm.doc.custom_ctc_monthly;\n\t\t\n\t\tif(ctc_monthly){\n\t\t    var ctc_annual = ctc_monthly*12;\n\t\t    \n\t\t    frm.set_value('custom_ctc_annual', ctc_annual);\n\t\t    frm.refresh_field('custom_ctc_annual');\n\t\t}\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Applicant",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.692653",
  "module": "Sanskar HRMS",
  "name": "Filter status in Job Applicant",
  "script": "frappe.ui.form.on('Job Applicant', {\n    validate : function(frm){\n        \n        \n        var recruiter_role = 'Recruiter'\n        var is_recruiter = false;\n        var other_roles_present = false;\n        \n        var default_list = ['All', 'Guest', 'Desk User', 'Employee']\n            \n        // Checking if the user only has recruiter role or not \n            \n        frappe.user_roles.forEach(function(role)\n        {\n            if (role === recruiter_role) {\n                is_recruiter = true;\n            } else if (!default_list.includes(role)) {\n                other_roles_present = true;\n            }\n        });\n      \n        // Sending mail to user's reports to employee when user with recruiter creats a new job application\n        if(is_recruiter && !other_roles_present)\n        {\n           // If the jo application is new then sending get necessary data and sending mail to user's report's to employee\n            if(frm.is_new())\n            {\n                frappe.call({\n                    method: \"mail to hr\",\n                    args:{\n\n                        'current_user': frappe.user.name,\n                        'job_applicant': frm.doc.applicant_name,\n                        'job_title': frm.doc.designation,\n                        'email_id': frm.doc.email_id,\n                        'phone_number': frm.doc.phone_number,\n                        'link' : `http://192.168.10.40:8000/app/job-applicant/${frm.doc.email_id}`\n                    },\n                    callback: function(res)\n                    {\n                        console.log(`${res.user_name} -  reports to ${res.snr_employee}`)\n                        console.log(`Job Applicant ${res.job_applicant}`)\n                    }\n                })\n            }\n        }\n        \n        \n    },\n    \n    \n// \tcustom_interview_round:function(frm) {\n\t    \n\t\n// \t\tvar interview_round = frm.doc.custom_interview_round;\n// \t    // Setting Default Sub Status Based on Main Interview Round   \t\n// \t\tif (interview_round==='Telephonic Round'){\n\t\t    \n// \t        frm.set_df_property('custom_interview_status', 'reqd', 1)\n// \t        var recruiter_role = 'Recruiter'\n//             var is_recruiter = false;\n//             var other_roles_present = false;\n            \n//             var default_list = ['All', 'Guest', 'Desk User', 'Employee']\n                \n//             // Checking if the user only has recruiter role or not \n                \n//             frappe.user_roles.forEach(function(role)\n//             {\n//                 if (role === recruiter_role) {\n//                     is_recruiter = true;\n//                 } else if (!default_list.includes(role)) {\n//                     other_roles_present = true;\n//                 }\n//             });\n          \n//             //  limiting sub status options to be shown  for recruiter role.\n//             if(is_recruiter && !other_roles_present)\n//             {\n//                 // If the User has only recruiter role then setting default sub status\n//               console.log(\"User has only Recruiter role\")\n//               frm.set_df_property('custom_interview_status', 'options', ['Under Review'])\n//             }\n//             else\n//             {\n//                 console.log(\"User Has other roles also\")\n//                 frm.set_df_property('custom_interview_status', 'options', ['Under Review', 'Approved by HR', 'Rejected by HR'])\n//             }\n// \t\t}\n\t\t\n// \t\tif (interview_round==='Technical Round'){\n\t\t    \n// \t\t     frm.set_df_property('custom_interview_status', 'reqd', 1)\n// \t\t     frm.set_df_property('custom_interview_status', 'options', ['Scheduled', 'Rescheduled', 'Task Given', 'Under Review', 'Cleared', 'Rejected', 'Not Appeared'])\n// \t\t}\n\t\t\n// \t\tif(interview_round==='Final Round'){\n\t\t    \n// \t\t    frm.set_df_property('custom_interview_status', 'reqd', 1)\n// \t\t    frm.set_df_property('custom_interview_status', 'options', ['Scheduled', 'Rescheduled', 'Under Review', 'Cleared', 'Rejected', 'Not Appeared'])\n// \t\t}\n// \t},\n\t\n\tonload(frm){\n\t   // Setting Default Sub Status Based on Main Interview Round   \n\t   var interview_round = frm.doc.custom_interview_round;\n\t\t\n\t\tif (interview_round==='Telephonic Round'){\n\t\t    \n\t         var recruiter_role = 'Recruiter'\n            var is_recruiter = false;\n            var other_roles_present = false;\n            \n            var default_list = ['All', 'Guest', 'Desk User', 'Employee']\n                \n            // Checking if the user only has recruiter role or not \n                \n            frappe.user_roles.forEach(function(role)\n            {\n                if (role === recruiter_role) {\n                    is_recruiter = true;\n                } else if (!default_list.includes(role)) {\n                    other_roles_present = true;\n                }\n            });\n          \n          \n            if(is_recruiter && !other_roles_present)\n            {\n                // If the User has only recruiter role then setting default sub status\n               console.log(\"User has only Recruiter role\")\n               frm.set_df_property('custom_interview_status', 'options', ['Under Review'])\n            }\n            else\n            {\n                console.log(\"User Has other roles also\")\n                frm.set_df_property('custom_interview_status', 'options', ['Under Review', 'Approved by HR', 'Rejected by HR'])\n            }\n\t\t}\n\t\t\n\t\tif (interview_round==='Technical Round'){\n\t\t    \n\t\t     \n\t\t     frm.set_df_property('custom_interview_status', 'options', ['Scheduled', 'Rescheduled', 'Task Given', 'Under Review', 'Cleared', 'Rejected', 'Not Appeared'])\n\t\t}\n\t\t\n\t\tif(interview_round==='Final Round'){\n\t\t    \n\t\t    \n\t\t    frm.set_df_property('custom_interview_status', 'options', ['Scheduled', 'Rescheduled', 'Under Review', 'Cleared', 'Rejected', 'Not Appeared'])\n\t\t}\n\t    \n    }\n\t\n})\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.838552",
  "module": "Sanskar HRMS",
  "name": "Filter Job Applicant based on Interview Round",
  "script": "frappe.ui.form.on('Interview', {\n\trefresh(frm) {\n\t\n\t\tfrm.set_query(\"job_applicant\", function () {\n\t\t    var interview_filters = {}\n\t\t    if (frm.doc.custom_round === \"2nd Interview Round\")\n\t\t    {\n\t\t      interview_filters['status'] = [\"in\", [\"Technical Round - Cleared\"]]\n\t\t    }\n\t\t    else if (frm.doc.custom_round === \"1st Interview Round\")\n\t\t    {\n\t\t        interview_filters['status'] = [\"in\", [\"Telephonic Round - Approved by HR\"]]\n\t\t    }\n\t\t    \n\t\t\n\t\t\treturn {\n        filters: {\n                \n            status: interview_filters['status']\n        }\n    }\n\t\t});\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Offer",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.723426",
  "module": "Sanskar HRMS",
  "name": "Job Offer filtered job applicant field",
  "script": "frappe.ui.form.on('Job Offer', {\n\trefresh(frm) {\n\t\tfrm.set_query(\"job_applicant\", function () {\n\t\t    var interview_filters = {}\n\t\t\treturn {\n                filters: {\n                    status:[\"in\", [\"Final Round - Cleared\"]]\n                }\n            }\n\t\t});\n\t},\n\t\n\tbefore_submit: function(frm)\n\t{\n\t    \n\t    status_list = ['Accepted', 'Rejected']\n\t    if (!status_list.includes(frm.doc.status))\n\t    {\n\t        frm.refresh()\n\t        frappe.throw(__('Only Job Offer with Accepted or Rejected status can be submitted.'))\n\t    }\n\t  \n\t},\n\t\n// \tafter_cancel: function(frm)\n// \t{\n//         console.log(\"Hello\")\n//         frappe.db.set_value('Job Applicant', frm.doc.job_applicant, {'status': 'Final Round - Cleared', 'custom_interview_round': 'Final Round', 'custom_interview_status': 'Cleared'});\n       \n// \t},\n// \tafter_delete: function(frm)\n// \t{\n//         console.log(\"Hello\")\n//         frappe.db.set_value('Job Applicant', frm.doc.job_applicant, {'status': 'Final Round - Cleared', 'custom_interview_round': 'Final Round', 'custom_interview_status': 'Cleared'});\n       \n// \t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Applicant",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.662018",
  "module": "Sanskar HRMS",
  "name": "Filter Job applicant status for recruiter role",
  "script": "frappe.ui.form.on('Job Applicant', {\n\tonload:function(frm) {\n\t\t\n\t\tvar recruiter_role = 'Recruiter'\n        var is_recruiter = false;\n        var other_roles_present = false;\n        \n        var default_list = ['All', 'Guest', 'Desk User', 'Employee']\n        \n        // filter interview round amd status whem user ha only recruiter role\n        frappe.user_roles.forEach(function(role)\n            {\n                if (role === recruiter_role) {\n                    is_recruiter = true;\n                    // console.log('Recruiter')\n                    frm.set_df_property('custom_interview_round', 'options', ['Open','Hold', 'Shortlisted', 'Telephonic Round'])\n                    frm.set_df_property('custom_interview_status', 'options', ['Under Review', 'Cleared', 'Rejected'])\n                    \n                    \n                } else if (!default_list.includes(role)) {\n                    other_roles_present = true;\n                    console.log('Not')\n                    \n                }\n        });\n\t\t\n\t},\n\tafter_save: function(frm){\n\t    \n\t    \n\t    var status = frm.doc.status;\n\t    var inter_round = frm.doc.custom_interview_round;\n\t    var inter_status = frm.doc.custom_interview_status;\n\t    \n\t    if(status=='Telephonic Round - Cleared'){\n\t        \n\t        \n\t        var recruiter_role = 'Recruiter'\n            var is_recruiter = false;\n            var other_roles_present = false;\n            \n            var default_list = ['All', 'Guest', 'Desk User', 'Employee']\n            \n            // Sending mail to recruiter's reports to employee when user with recruiter update the job applicant round='Telephonic Round' and status='Cleared'\n            frappe.user_roles.forEach(function(role)\n                {\n                    if (role === recruiter_role) {\n                        is_recruiter = true;\n                        // console.log('Recruiter')\n                       \n                        // if(frm.is_new())\n                        // {\n                        frappe.call({\n                            method: \"mail to hr\",\n                            args:{\n        \n                                'current_user': frappe.user.name,\n                                'job_applicant': frm.doc.applicant_name,\n                                'job_title': frm.doc.designation,\n                                'email_id': frm.doc.email_id,\n                                'phone_number': frm.doc.phone_number,\n                                'link' : `http://192.168.10.40:8000/app/job-applicant/${frm.doc.email_id}`\n                            },\n                            callback: function(res)\n                            {\n                                console.log(`${res.user_name} -  reports to ${res.snr_employee}`)\n                                console.log(`Job Applicant ${res.job_applicant}`)\n                            }\n                        })\n                        // }\n                        \n                        \n                    } else if (!default_list.includes(role)) {\n                        other_roles_present = true;\n                        console.log('Not')\n                        \n                    }\n            });\n\t}\n\t        \n\t    }\n\t    \n\t    \n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Opening",
  "enabled": 1,
  "modified": "2024-03-19 13:08:02.733418",
  "module": "Sanskar HRMS",
  "name": "Set job title based on staffing plan",
  "script": "frappe.ui.form.on('Job Opening', {\n\tbefore_save(frm) {\n\t\tvar plan = frm.doc.staffing_plan;\n\t\tvar desi = frm.doc.designation;\n\t\t\n\t\tvar title = desi+\"-\"+plan;\n\t\t\n\t\tfrm.set_value('job_title',title);\n\t\tfrm.refresh_field('job_title');\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Opening",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.554326",
  "module": "Sanskar HRMS",
  "name": "Fetch staffing Plan while selecting vacancies in Job Opening",
  "script": "frappe.ui.form.on('Job Opening', {\n    designation: function(frm) {\n        var desi = frm.doc.designation;\n            \n            \n        frappe.call({\n            method: \"fetch_staffing_plan\", \n            args:{\n                \"designation\": desi,\n              \n                      \n            },\n            callback: function(r) {\n                var ans = r.message;\n                var plan = ans[0];\n                \n                frm.set_value('staffing_plan', plan);\n                \n            }\n        });\n        \n    }\n});\n",
  "view": "Form"
 }
]
[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Allocation",
  "enabled": 1,
  "modified": "2024-06-03 15:54:02.497769",
  "module": "Sanskar HRMS",
  "name": "Filters on Leave Allocation",
  "script": "cur_frm.cscript.onload = function(frm) {\n\t    var emp = cur_frm.doc.employee;\n\t    console.log(emp);\n\t     cur_frm.set_query(\"employee\", function() {\n            return {\n                \"filters\": {\n                    \"employment_type\": \"Full-time\"\n                    \n                }\n                };\n            });\n};\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2024-05-29 11:07:10.148178",
  "module": "Sanskar HRMS",
  "name": "Create LA for LWP",
  "script": "frappe.ui.form.on('Leave Application', {\n    setup(frm){\n        if(frm.is_new())\n            {\n            var ids=[\"tithi@sanskartechnolab.com\",\"hitesh@sanskartechnolab.com\"];\n            var row;\n            // frm.clear_table('cc');\n            for(var i=0;i<ids.length;i++){\n                row = frm.add_child(\"cc\");\n                row.cc = ids[i];\n                frm.refresh_field(\"cc\");\n            }\n        }\n    },\n    before_submit(frm) {\n\t\tif(frm.doc.leave_type != \"Leave Without Pay\" && frm.doc.lwp_from){\n\t\t    var lwp_from = frm.doc.lwp_from;\n    \t\tvar lwp_to = frm.doc.lwp_to;\n    \t\tvar emp = frm.doc.employee;\n    \t\tvar emp_nm = frm.doc.employee_name;\n    \t\tvar leave_application = frm.doc.name;\n    \t\tvar lwp_halfday_date;\n            var reason = frm.doc.description;\n    \t\tif(frm.doc.is_halfday_lwp==1){\n    \t\t    lwp_halfday_date = frm.doc.lwp_halfday_date;\n    \t\t}\n    \t\telse\n    \t\t{\n    \t\t    lwp_halfday_date = null;\n    \t\t}\n    \t\t\n    \t\tif(!frm.doc.lwp_from && !frm.doc.lwp_to){\n    \t\t    lwp_from = null;\n    \t\t    lwp_to = null;\n    \t\t}\n    \t\t\n    \t\tif(frm.doc.status == \"Approved\" || frm.doc.status == \"Rejected\")\n    \t\t{\n    \t\t  //  console.log(\"IIINNNNN\");\n    \t\t    frappe.call({\n                                method: \"lwp_leave_application\",\n                                args:{\n                                    \"employee\": emp,\n                                    \"lwp_from\": lwp_from,\n                                    \"lwp_to\": lwp_to,\n                                    \"leave_application\": leave_application,\n                                    \"lwp_halfday_date\" : lwp_halfday_date,\n                                    \"status\": frm.doc.status,\n                                    \"reason\" : reason\n                                },\n                                 callback: function(r) {\n                                    console.log(\"Success\");\n                                    frm.refresh();\n                                }\n                });   \n    \t\t}\n\t\t}\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2024-06-19 16:50:40.740119",
  "module": "Sanskar HRMS",
  "name": "Leave Application Email",
  "script": "frappe.ui.form.on('Leave Application', {\n\tafter_save:function(frm) {\n\t    if(frappe.session.user === frm.doc.employee_email){\n\t\t    if (frm.doc.status === \"Open\" && !frm.doc.leave_application){\n\t\t    var recipients = [];\n\t\t    \n        \t$.each(frm.doc.cc, function(i, d) {\n                recipients.push(d.cc);\n            });\n            console.log(recipients);\n            var ecc_str = \" \";\n            recipients.forEach((element, index) => {\n                  ecc_str += element;\n            \n                  // If there is a next element, add a comma\n                  if (index !== recipients.length - 1) {\n                     ecc_str += ',';\n              }\n            });\n            console.log(ecc_str);\n                var sender = frm.doc.employee_email;\n                var name= frm.doc.name;\n                var approver=frm.doc.leave_approver;\n                // Make an AJAX request to send the email\n                frappe.call({\n                        method: \"get_leave_application_template\",\n                        args: {\n                            sender: sender,\n                            name: name,\n                        },\n                        callback: function(r) {\n                            console.log(r.message);\n                            frappe.call({\n                            \tmethod: \"frappe.core.doctype.communication.email.make\",\n                            \targs: {\n                            \t    sender: r.sender,\n                            \t\trecipients: approver,\n                            \t\tcc: ecc_str,\n                            \t\tcontent: r.message,\n                            \t\tsubject: \"Leave Application\",\n                            \t\tsend_email: 1,\n                            \t\tcommunication_medium: \"Email\",\n                            \t\tnow: true\n                            \t},\n                            \tasync: false,\n                            \tcallback: function(rh){\n                            \t  console.log(\"mail sent\");\n                            \t}\n                            });\n                        }\n                });\n\t\t}\n\t\t}\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2024-06-19 16:09:25.093177",
  "module": "Sanskar HRMS",
  "name": "Leave application reply email",
  "script": "frappe.ui.form.on('Leave Application', {\n\tafter_workflow_action(frm){\n\t   // console.log(frm.doc.status);\n\t    if(frm.doc.status === \"Approved\"){\n\t       // console.log(frm.doc.status);\n\t\t    var recipients = [];\n        \t$.each(frm.doc.cc, function(i, d) {\n                recipients.push(d.cc);\n            });\n            // console.log(recipients);\n            var ecc_str = \" \";\n            recipients.forEach((element, index) => {\n                  ecc_str += element;\n            \n                  // If there is a next element, add a comma\n                  if (index !== recipients.length - 1) {\n                     ecc_str += ',';\n              }\n            });\n            // console.log(ecc_str);\n                var sender = frm.doc.leave_approver;\n                var name= frm.doc.name;\n                var owner=frm.doc.employee_email;\n                \n                // Make an AJAX request to send the email\n                frappe.call({\n                        method: \"get_application_reply_template\",\n                        args: {\n                            sender: sender,\n                            name: name,\n                            owner: owner,\n                        },\n                        callback: function(r) {\n                            // console.log(r.message);\n                            frappe.call({\n                            \tmethod: \"frappe.core.doctype.communication.email.make\",\n                            \targs: {\n                            \t    sender: r.sender,\n                            \t\trecipients: r.recipient,\n                            \t\tcc: ecc_str,\n                            \t\tcontent: r.message,\n                            \t\tsubject: \"Leave Application Status\",\n                            \t\tsend_email: 1,\n                            \t\tcommunication_medium: \"Email\",\n                            \t\tnow: true\n                            \t},\n                            \tasync: false,\n                            \tcallback: function(rh){\n                            \t  console.log(\"mail sent\");\n                            \t}\n                            });\n                        }\n                });\n\t    }\n\t\t\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 1,
  "modified": "2024-05-16 11:56:57.636631",
  "module": "Sanskar HRMS",
  "name": "Custom Submit Feedback button in Interview",
  "script": "frappe.ui.form.on('Interview', {\n\n\trefresh:function(frm) {\n\t    \n\t    if (frm.doc.status == 'Cleared' || frm.doc.status == 'Rejected'){\n\t        $('[data-label=\"Submit%20Feedback\"]').hide();\n\t        $('[data-label=\"Submit%20Interview%20Feedback\"]').hide();\n\t        \n\t    }\n\t    else{\n\t        $('[data-label=\"Submit%20Feedback\"]').hide();\n\t        $('[data-label=\"Submit%20Interview%20Feedback\"]').show();\n\t        frm.trigger(\"add_custom_buttons\");\n\t    }\n\t    \n\t\t$(\"textarea[data-fieldname='custom_meeting_link']\").css({'height':'50'});\n\t\n        \n\t},\n\tonload:function(frm){\n\t    if (frm.doc.status == 'Cleared' || frm.doc.status == 'Rejected'){\n\t        $('[data-label=\"Submit%20Feedback\"]').hide();\n\t        $('[data-label=\"Submit%20Interview%20Feedback\"]').hide();\n\t        \n\t    }\n\t    else{\n\t        $('[data-label=\"Submit%20Feedback\"]').hide();\n\t        $('[data-label=\"Submit%20Interview%20Feedback\"]').show();\n\t        frm.trigger(\"add_custom_buttons\");\n\t    }\n\t    \n\t\t$(\"textarea[data-fieldname='custom_meeting_link']\").css({'height':'50'});\n\t},\n\tadd_custom_buttons: function(frm) {\n\t    \n\t    frm.add_custom_button(__(\"Submit Interview Feedback\"), function() {\n        \n       \n        \n        frappe.call({\n\t\t\tmethod:\n\t\t\t\t\"hrms.hr.doctype.interview.interview.get_expected_skill_set\",\n\t\t\targs: {\n\t\t\t\tinterview_round: frm.doc.interview_round,\n\t\t\t},\n\t\t\tcallback: function (r) {\n\t\t\t\tfrm.events.show_feedback_dialog(frm, r.message);\n\t\t\t\tfrm.refresh();\n\t\t\t},\n\t\t});\n        \n        \n    });\n\t},\n\t\n\t\n\tshow_feedback_dialog: function (frm, data) {\n\t\tlet fields = frm.events.get_fields_for_feedback();\n\n\t\tlet d = new frappe.ui.Dialog({\n\t\t\ttitle: __(\"Submit Feedback\"),\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tfieldname: \"skill_set\",\n\t\t\t\t\tfieldtype: \"Table\",\n\t\t\t\t\tlabel: __(\"Skill Assessment\"),\n\t\t\t\t\tcannot_add_rows: false,\n\t\t\t\t\tin_editable_grid: true,\n\t\t\t\t\treqd: 1,\n\t\t\t\t\tfields: fields,\n\t\t\t\t\tdata: data,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldname: \"result\",\n\t\t\t\t\tfieldtype: \"Select\",\n\t\t\t\t\toptions: [\"\", \"Cleared\", \"Rejected\"],\n\t\t\t\t\tlabel: __(\"Result\"),\n\t\t\t\t\treqd: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldname: \"feedback\",\n\t\t\t\t\tfieldtype: \"Small Text\",\n\t\t\t\t\tlabel: __(\"Feedback\"),\n\t\t\t\t},\n\t\t\t],\n\t\t\tsize: \"large\",\n\t\t\tminimizable: true,\n\t\t\tstatic: true,\n\t\t\tprimary_action: function (values) {\n\t\t\t\tfrappe\n\t\t\t\t\t.call({\n\t\t\t\t\t\tmethod:\n\t\t\t\t\t\t\t\"hrms.hr.doctype.interview.interview.create_interview_feedback\",\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\tdata: values,\n\t\t\t\t\t\t\tinterview_name: frm.doc.name,\n\t\t\t\t\t\t\tinterviewer: frappe.session.user,\n\t\t\t\t\t\t\tjob_applicant: frm.doc.job_applicant,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tfrm.refresh();\n\t\t\t\t\t});\n\t\t\t\td.hide();\n\t\t\t},\n\t\t});\n\t\td.show();\n\t\td.get_close_btn().show();\n\t},\n\n\tget_fields_for_feedback: function () {\n\t\treturn [\n\t\t\t{\n\t\t\t\tfieldtype: \"Link\",\n\t\t\t\tfieldname: \"skill\",\n\t\t\t\toptions: \"Skill\",\n\t\t\t\tin_list_view: 1,\n\t\t\t\tlabel: __(\"Skill\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Rating\",\n\t\t\t\tfieldname: \"rating\",\n\t\t\t\tlabel: __(\"Rating\"),\n\t\t\t\tin_list_view: 1,\n\t\t\t\treqd: 1,\n\t\t\t},\n\t\t];\n\t},\n\n})\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.753238",
  "module": "Sanskar HRMS",
  "name": "Job_applicant status change",
  "script": "frappe.ui.form.on('Interview', {\n\tonload: function(frm) {\n\t    \n\t     var round = frm.doc.custom_round;\n\t     if (round=='1st Interview Round'){\n\t          frm.set_df_property('status', 'options', ['Scheduled', 'Rescheduled','Task Given', 'Cleared', 'Rejected', 'Not Appeared'])\n\t     }\n\t     else{\n\t         frm.set_df_property('status', 'options', ['Scheduled', 'Rescheduled', 'Cleared', 'Rejected', 'Not Appeared'])\n\t     }\n\t     \n\t},\n\tcustom_round: function(frm)\n\t{\n\n         var round = frm.doc.custom_round;\n\t     if (round=='1st Interview Round'){\n\t          frm.set_df_property('status', 'options', ['Scheduled', 'Rescheduled','Task Given', 'Cleared', 'Rejected', 'Not Appeared'])\n\t     }\n\t     else{\n\t         frm.set_df_property('status', 'options', ['Scheduled', 'Rescheduled', 'Cleared', 'Rejected', 'Not Appeared'])\n\t     }\n\n\t},\n\t\n\tstatus: function(frm) {\n\t    //If the Reschedule status is select then showing a dialog to update interview reschedule date, from time and to_time\n\t    \n\t    if (frm.doc.status == \"Rescheduled\") \n\t    {\n\t       var d = new frappe.ui.Dialog({\n    \t\t\ttitle: \"Reschedule Interview\",\n    \t\t\tfields: [\n    \t\t\t\t{\n    \t\t\t\t\tlabel: \"Schedule On\",\n    \t\t\t\t\tfieldname: \"scheduled_on\",\n    \t\t\t\t\tfieldtype: \"Date\",\n    \t\t\t\t\treqd: 1,\n    \t\t\t\t\tdefault: frm.doc.scheduled_on,\n    \t\t\t\t},\n    \t\t\t\t{\n    \t\t\t\t\tlabel: \"From Time\",\n    \t\t\t\t\tfieldname: \"from_time\",\n    \t\t\t\t\tfieldtype: \"Time\",\n    \t\t\t\t\treqd: 1,\n    \t\t\t\t\tdefault: frm.doc.from_time,\n    \t\t\t\t},\n    \t\t\t\t{\n    \t\t\t\t\tlabel: \"To Time\",\n    \t\t\t\t\tfieldname: \"to_time\",\n    \t\t\t\t\tfieldtype: \"Time\",\n    \t\t\t\t\treqd: 1,\n    \t\t\t\t\tdefault: frm.doc.to_time,\n    \t\t\t\t},\n    \t\t\t],\n    \t\t\tprimary_action_label: \"Reschedule\",\n    \t\t\tprimary_action(values) {\n    \t\t\t\tfrm.call({\n    \t\t\t\t\t\tmethod: \"reschedule_interview\",\n    \t\t\t\t\t\tdoc: frm.doc,\n    \t\t\t\t\t\targs: {\n    \t\t\t\t\t\t\tscheduled_on: values.scheduled_on,\n    \t\t\t\t\t\t\tfrom_time: values.from_time,\n    \t\t\t\t\t\t\tto_time: values.to_time,\n    \t\t\t\t\t\t},\n    \t\t\t\t\t})\n    \t\t\t\t\t.then(() => {\n    \t\t\t\t\t\tfrm.refresh();\n    \t\t\t\t\t\td.hide();\n    \t\t\t\t\t\tfrm.save();\n    \t\t\t\t\t});\n    \t\t\t},\n    \t\t});\n    \t\td.show();\n    \t\t\n\t    }\n\t    \n\t}\n// \tafter_save(frm)\n// \t{\n// \t    if (frm.doc.interview_round === 'Telephonic Round')\n// \t    {\n// \t        status_list = ['Approved by HR', 'Rejected by HR']\n// \t    }\n// \t    else\n// \t    {\n// \t        status_list = ['Cleared']\n// \t    }\n\t    \n\t   \n// \t       // checking if status does not include in below list \n// \t    if (!status_list.includes(frm.doc.status))\n// \t    {\n// \t        // if status does not include in abbove list then using frappe.call function to call server script which will change status in \n// \t        //job applicant doctype\n// \t        // passing interview status to be set in job applicant and job applicant id \n// \t        frappe.call({\n\t            \n// \t            method: 'job applicant status change',\n// \t            args : {\n// \t                'interview_status': `${frm.doc.interview_round} - ${frm.doc.status}`,\n// \t                'status': frm.doc.status,\n// \t                'interview_round': frm.doc.interview_round,\n// \t                'job_applicant': frm.doc.job_applicant\n\t                \n// \t            }\n// \t        });\n// \t    }\n\t    \n// \t    // Changing Status Color Based on status\n\t    \n\t    \n\t    \n// \t},\n\t\n// \ton_submit: function(frm)\n// \t{\n// \t    if (frm.doc.interview_round === 'Telephonic Round')\n// \t    {\n// \t        status_list = ['Approved by HR', 'Rejected by HR']\n// \t    }\n// \t    else\n// \t    {\n// \t        status_list = ['Cleared']\n// \t    }\n// \t   // Checking Status includes in below list or not\n// \t    if (status_list.includes(frm.doc.status))\n// \t    {\n// \t        console.log(\"On_submit\")\n// \t        // If status exists in the above list then using frappe.call to call server script which will upate job applicant status\n// \t        // passing interview status to be set in job applicant and job applicant id \n// \t        frappe.call({\n\t            \n// \t            method: 'job applicant status change',\n// \t            args : {\n// \t                'interview_status': `${frm.doc.interview_round} - ${frm.doc.status}`,\n// \t                'status': frm.doc.status,\n// \t                'interview_round': frm.doc.interview_round,\n// \t                'job_applicant': frm.doc.job_applicant\n\t                \n// \t            }\n// \t        });\n// \t    }\n\t   \n\t   \n// \t}\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.816255",
  "module": "Sanskar HRMS",
  "name": "Set Confirmation Date in Employee",
  "script": "frappe.ui.form.on('Employee', {\n\tbefore_save(frm) {\n\t    \n\t    var doj = frm.doc.date_of_joining;\n\t\tvar training_probation_months = frm.doc.custom_training_probation_period;\n\t\n\t\t\n\t\tif(doj && training_probation_months){\n\t\t    var training_probation_days = training_probation_months*60;\n\t\t    var confirm_date = frappe.datetime.add_days(doj, training_probation_days);\n\t\t    \n\t\t    frm.set_value('custom_confirmation_date',confirm_date);\n\t\t    frm.refresh_field('custom_confirmation_date')\n\t\t    \n\t\t}\n// \t\tfrm.save();\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.838552",
  "module": "Sanskar HRMS",
  "name": "Filter Job Applicant based on Interview Round",
  "script": "frappe.ui.form.on('Interview', {\n\trefresh(frm) {\n\t\n\t\tfrm.set_query(\"job_applicant\", function () {\n\t\t    var interview_filters = {}\n\t\t    if (frm.doc.custom_round === \"2nd Interview Round\")\n\t\t    {\n\t\t      interview_filters['status'] = [\"in\", [\"Technical Round - Cleared\"]]\n\t\t    }\n\t\t    else if (frm.doc.custom_round === \"1st Interview Round\")\n\t\t    {\n\t\t        interview_filters['status'] = [\"in\", [\"Telephonic Round - Approved by HR\"]]\n\t\t    }\n\t\t    \n\t\t\n\t\t\treturn {\n        filters: {\n                \n            status: interview_filters['status']\n        }\n    }\n\t\t});\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Offer",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.723426",
  "module": "Sanskar HRMS",
  "name": "Job Offer filtered job applicant field",
  "script": "frappe.ui.form.on('Job Offer', {\n\trefresh(frm) {\n\t\tfrm.set_query(\"job_applicant\", function () {\n\t\t    var interview_filters = {}\n\t\t\treturn {\n                filters: {\n                    status:[\"in\", [\"Final Round - Cleared\"]]\n                }\n            }\n\t\t});\n\t},\n\t\n\tbefore_submit: function(frm)\n\t{\n\t    \n\t    status_list = ['Accepted', 'Rejected']\n\t    if (!status_list.includes(frm.doc.status))\n\t    {\n\t        frm.refresh()\n\t        frappe.throw(__('Only Job Offer with Accepted or Rejected status can be submitted.'))\n\t    }\n\t  \n\t},\n\t\n// \tafter_cancel: function(frm)\n// \t{\n//         console.log(\"Hello\")\n//         frappe.db.set_value('Job Applicant', frm.doc.job_applicant, {'status': 'Final Round - Cleared', 'custom_interview_round': 'Final Round', 'custom_interview_status': 'Cleared'});\n       \n// \t},\n// \tafter_delete: function(frm)\n// \t{\n//         console.log(\"Hello\")\n//         frappe.db.set_value('Job Applicant', frm.doc.job_applicant, {'status': 'Final Round - Cleared', 'custom_interview_round': 'Final Round', 'custom_interview_status': 'Cleared'});\n       \n// \t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Applicant",
  "enabled": 1,
  "modified": "2024-06-03 17:41:40.787657",
  "module": "Sanskar HRMS",
  "name": "Filter Job applicant status for recruiter role",
  "script": "frappe.ui.form.on('Job Applicant', {\n    refresh:function(frm){\n        $('[data-label=\"Create\"]').hide()\n        var status = frm.doc.status;\n        var status_list = ['Shortlisted', 'Telephonic Round - Approved by HR', 'Technical Round - Cleared']\n        \n        if(status_list.includes(status)){\n            $('[data-label=\"Create\"]').show()\n        }\n        \n    },\n\tonload:function(frm) {\n\t\t\n\t\tvar recruiter_role = 'Recruiter'\n// \t\tvar recruiter_role = 'Recruitment'\n        var is_recruiter = false;\n        var other_roles_present = false;\n        \n        var default_list = ['All', 'Guest', 'Desk User', 'Employee']\n        \n        \n        \n        frappe.user_roles.forEach(function(role)\n            {\n                if (role === recruiter_role) {\n                    is_recruiter = true;\n                    // console.log('Recruiter')\n                    frm.set_df_property('custom_interview_round', 'options', ['Open','Hold', 'Shortlisted', 'Telephonic Round'])\n                    frm.set_df_property('custom_interview_status', 'options', ['Under Review', 'Cleared', 'Rejected', 'Not Appeared'])\n                    \n                    \n                } else if (!default_list.includes(role)) {\n                    other_roles_present = true;\n                    // console.log('Not')\n                    \n                }\n        });\n\n        \n        \n      \n\t\t\n\t},\n\tafter_save: function(frm) {\n    var status = frm.doc.status;\n    var interview_round = frm.doc.custom_interview_round;\n    var interview_status = frm.doc.custom_interview_status;\n    \n    // Check if the document is being saved due to Telephonic Round - Cleared status\n    if (status == 'Telephonic Round - Cleared' && !frm.custom_saving_in_progress) {\n        frm.custom_saving_in_progress = true; // Set a flag to indicate saving is in progress\n        frm.set_value('custom_telephonic_cleared_by', frappe.session.user);\n        frm.refresh_field('custom_telephonic_cleared_by');\n        frm.save().then(function() {\n            frm.custom_saving_in_progress = false; // Reset the flag after saving is complete\n        });\n    }\n},\n\n\tafter_workflow_action: function(frm){\n\t    \n\t    var recruiter_role = 'HR Manager'\n        var is_recruiter = false;\n        var other_roles_present = false;\n        \n        var default_list = ['All', 'Guest', 'Desk User', 'Employee']\n        \n      \n        var doc_link = `https://sanskar.frappe.cloud/app/job-applicant/${frm.doc.email_id}`;\n        \n        \n        frappe.user_roles.forEach(function(role)\n            {\n                if (role === recruiter_role) {\n                    is_recruiter = true;\n                    \n                    var mail_subject = `Applicant Status Notification - ${frm.doc.applicant_name}`;\n                    \n                    frappe.call({\n                        method: 'status_notification', \n                        args: {\n                            mail_subject: mail_subject,\n                            sender: frappe.session.user,\n                            recruiter_mail: frm.doc.custom_telephonic_cleared_by,\n                            applicant_name: frm.doc.applicant_name,\n                            interview_round: frm.doc.custom_interview_round,\n                            interview_status: frm.doc.custom_interview_status,\n                            doc_link: doc_link\n                        },\n                        callback: function(r) {\n                            if (r.message) {\n                                frappe.show_alert('Email sent successfully');\n                            }\n                        }\n                    });\n                    \n                    \n            \n                    \n                }\n        });\n\t    \n\t    \n\t}\n\t\n\t    \n\t    \n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Opening",
  "enabled": 1,
  "modified": "2024-03-19 13:08:02.733418",
  "module": "Sanskar HRMS",
  "name": "Set job title based on staffing plan",
  "script": "frappe.ui.form.on('Job Opening', {\n\tbefore_save(frm) {\n\t\tvar plan = frm.doc.staffing_plan;\n\t\tvar desi = frm.doc.designation;\n\t\t\n\t\tvar title = desi+\"-\"+plan;\n\t\t\n\t\tfrm.set_value('job_title',title);\n\t\tfrm.refresh_field('job_title');\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Opening",
  "enabled": 1,
  "modified": "2024-03-19 12:43:59.554326",
  "module": "Sanskar HRMS",
  "name": "Fetch staffing Plan while selecting vacancies in Job Opening",
  "script": "frappe.ui.form.on('Job Opening', {\n    designation: function(frm) {\n        var desi = frm.doc.designation;\n            \n            \n        frappe.call({\n            method: \"fetch_staffing_plan\", \n            args:{\n                \"designation\": desi,\n              \n                      \n            },\n            callback: function(r) {\n                var ans = r.message;\n                var plan = ans[0];\n                \n                frm.set_value('staffing_plan', plan);\n                \n            }\n        });\n        \n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Offer",
  "enabled": 1,
  "modified": "2024-05-02 16:55:11.660911",
  "module": "Sanskar HRMS",
  "name": "Set Accpted Date in job offer",
  "script": "frappe.ui.form.on('Job Offer', {\n    status: function(frm) {\n        \n        var today = frappe.datetime.now_datetime()\n        \n        if (frm.doc.status == 'Accepted') {\n            frm.set_value('custom_accepted_date', today);\n        }\n    }\n});\n",
  "view": "Form"
 }
]
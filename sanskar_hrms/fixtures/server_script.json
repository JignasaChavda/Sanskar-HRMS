[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Delete",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-03-19 12:44:14.828947",
  "module": "Sanskar HRMS",
  "name": "Change Job Applicant status when interview is deleted",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Interview",
  "script": "# try:\ninterview_exists = frappe.db.exists(\"Interview\", {\"job_applicant\": doc.job_applicant, \"docstatus\": [\"!=\", 2]})\n\n# frappe.msgprint(str(interview_exists))\n\nif interview_exists:\n    job_applicant = frappe.db.get_value('Interview',interview_exists,['job_applicant'])\n    prev_status = frappe.db.get_value('Interview',interview_exists,['status'])\n    prev_round = frappe.db.get_value('Interview',interview_exists,['interview_round'])\n    \n    prev_status_string = f\"{prev_round} - {prev_status}\"\n    \n    frappe.db.set_value('Job Applicant', job_applicant, 'status', prev_status_string)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_round', prev_round)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_status', prev_status) \n    \n\nelse:\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', 'Telephonic Round - Approved by HR')\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', 'Telephonic Round')\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_status', 'Approved by HR')\n        \n# except Exception as e:\n#     # Code to handle any other exception\n#     pass",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-03-19 15:46:34.935323",
  "module": "Sanskar HRMS",
  "name": "Update Job Applicant Status",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Applicant",
  "script": "inter_round = doc.custom_interview_round\nstandard_round = ['Open', 'Shortlisted', 'Hold']\n\nif inter_round in standard_round:\n    frappe.db.set_value('Job Applicant', doc.name, 'status', inter_round)\n    doc.reload()\n\nelse:\n    job_applicant_status = f\"{doc.custom_interview_round} - {doc.custom_interview_status}\"\n    # frappe.msgprint(f\"{interview_round}-{interview_status}  {job_applicant}\")\n    if doc.custom_interview_round == 'Telephonic Round':\n        frappe.db.set_value('Job Applicant', doc.name, 'status', job_applicant_status)\n        doc.reload()\n    # frappe.msgprint(f\"{job_applicant_status}\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-02 15:56:47.092092",
  "module": "Sanskar HRMS",
  "name": "Job Applicant status update on job offer",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Offer",
  "script": "if doc.status == \"Accepted\":\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', 'Job Offer - Accepted')\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', 'Job Offer')\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_status', 'Accepted')\n\nelif doc.status == 'Rejected':\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', 'Job Offer - Rejected')\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', 'Job Offer')\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_status', 'Rejected')",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-02 16:06:18.102718",
  "module": "Sanskar HRMS",
  "name": "Update Job Applicant status when job offer is cancelled",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Offer",
  "script": "last_interview = frappe.db.get_list(\"Interview\", filters={\"job_applicant\": doc.job_applicant, \"docstatus\": [\"!=\", 2]}, order_by=\"creation desc\", limit=1)\n\n# frappe.msgprint(str(interview_exists))\n\nif last_interview:\n    job_applicant = frappe.db.get_value('Interview',last_interview,['job_applicant'])\n    prev_status = frappe.db.get_value('Interview',last_interview,['status'])\n    prev_round = frappe.db.get_value('Interview',last_interview,['interview_round'])\n    \n    prev_status_string = f\"{prev_round} - {prev_status}\"\n    frappe.db.set_value('Job Applicant', job_applicant, 'status', prev_status_string)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_round', prev_round)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_status', prev_status)\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-03-19 12:44:14.814673",
  "module": "Sanskar HRMS",
  "name": "Change job applicant status when interview is cancelled",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Interview",
  "script": "# try:\ninterview_exists = frappe.db.exists(\"Interview\", {\"job_applicant\": doc.job_applicant, \"docstatus\": [\"!=\", 2]})\n\n# frappe.msgprint(str(interview_exists))\n\nif interview_exists:\n    job_applicant = frappe.db.get_value('Interview',interview_exists,['job_applicant'])\n    prev_status = frappe.db.get_value('Interview',interview_exists,['status'])\n    prev_round = frappe.db.get_value('Interview',interview_exists,['interview_round'])\n    \n    prev_status_string = f\"{prev_round} - {prev_status}\"\n    \n    frappe.db.set_value('Job Applicant', job_applicant, 'status', prev_status_string)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_round', prev_round)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_status', prev_status) \n    \n\nelse:\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', 'Telephonic Round - Approved by HR')\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', 'Telephonic Round')\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_status', 'Approved by HR')\n        \n# except Exception as e:\n#     # Code to handle any other exception\n#     pass",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-03-19 12:44:14.800790",
  "module": "Sanskar HRMS",
  "name": "Update Job applicant status When interview is saved",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Interview",
  "script": "status = doc.status\ninterview_round = doc.interview_round\njob_applicant = doc.job_applicant\n\n\nif status in ['Scheduled', 'Rescheduled', 'Task Given', 'Not Appeared']:\n    \n    status_string = f\"{interview_round} - {status}\"\n    \n    frappe.db.set_value('Job Applicant', job_applicant, 'status', status_string)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_round', interview_round)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_status', status)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-03-19 12:44:14.788502",
  "module": "Sanskar HRMS",
  "name": "Update Job applicant status When interview is submitted",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Interview",
  "script": "status = doc.status\ninterview_round = doc.interview_round\njob_applicant = doc.job_applicant\n\n\nif status in ['Cleared', 'Rejected']:\n    \n    status_string = f\"{interview_round} - {status}\"\n    \n    frappe.db.set_value('Job Applicant', job_applicant, 'status', status_string)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_round', interview_round)\n    frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_status', status)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-03-20 16:50:10.564138",
  "module": "Sanskar HRMS",
  "name": "Auto update job opening status as 'Closed' based on the hired vacancy",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Offer",
  "script": "if doc.status == 'Accepted':\n    opening = doc.custom_job_opening\n    \n    vacancy = frappe.db.get_value('Job Opening', opening, 'planned_vacancies')\n    staffing_plan = frappe.db.get_value('Job Opening', opening, 'staffing_plan')\n    \n    hired_vacancy = frappe.db.count('Job Offer', {'docstatus':1, 'status': 'Accepted', 'custom_job_opening': opening})\n    \n    frappe.db.set_value('Job Opening', opening, 'custom_hired_vacancies', hired_vacancy)\n    \n    if vacancy==hired_vacancy:\n        \n        closing_date = frappe.utils.today()\n        frappe.db.set_value('Job Opening', opening, 'status', 'Closed')\n        frappe.db.set_value('Job Opening', opening, 'closed_on', closing_date)\n        \n    \n    \n    # Check status of job opening of particular staffing plan\n    data = frappe.db.get_list('Job Opening',\n    filters={\n        'staffing_plan': staffing_plan,\n    },\n    fields=['name', 'status'], as_list=True)\n\n    # Initialize a flag to track if all job openings are closed\n    all_closed = True\n    \n    # Iterate through the job openings\n    for x in data:\n        name = x[0]\n        status = x[1]\n        \n       \n        \n        # If any job opening is not closed, set the flag to False\n        if status != 'Closed':\n            all_closed = False\n    \n    # If all job openings are closed, print a message\n    if all_closed:\n        \n        frappe.db.set_value('Staffing Plan', staffing_plan, 'custom_is_active', 0)\n    else:\n        pass\n        # frappe.msgprint(\"Not all job openings for the staffing plan are closed.\")\n\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-02 16:13:30.494087",
  "module": "Sanskar HRMS",
  "name": "Update Hired vacancy in Job Opening when job offer is cancelled",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Offer",
  "script": "if doc.status=='Accepted':\n    opening = doc.custom_job_opening\n    vacancy = frappe.db.get_value('Job Opening', opening, 'custom_hired_vacancies')\n    \n    new_vacancy = vacancy-1\n    \n    frappe.db.set_value('Job Opening', opening, 'custom_hired_vacancies', new_vacancy)\n    frappe.db.set_value('Job Opening', opening, 'status', 'Open')\n\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "fetch_staffing_plan",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-03-19 12:44:14.733958",
  "module": "Sanskar HRMS",
  "name": "Fetch staffing plan based on designation in job opening",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "desi = frappe.form_dict[\"designation\"]\n\nresult = []\nplan = frappe.db.get_all(\n            \"Staffing Plan Detail\",\n            filters={\n                \"designation\": desi\n            },\n            fields=[\"parent\"]\n        )\n\nfor record in plan:\n    staffing_plan = record['parent']\n  \n    \n    is_active = frappe.db.get_value('Staffing Plan', staffing_plan, 'custom_is_active')\n    \n    if is_active==1:\n        result.append(staffing_plan)\n    \n\n    \nfrappe.response[\"message\"] = result\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-03-19 12:44:14.714502",
  "module": "Sanskar HRMS",
  "name": "Do not allow to create job offer against closed - job opening",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Offer",
  "script": "opening = doc.custom_job_opening\n\nopening_status = frappe.db.get_value('Job Opening', opening, 'status')\n\nif opening_status=='Closed':\n    opening_link = frappe.utils.get_link_to_form(\"Job Opening\", opening)\n    error_message = 'Job Opening is already closed: ' + opening_link\n    frappe.throw(error_message)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-03-19 12:44:14.684301",
  "module": "Sanskar HRMS",
  "name": "Do not allow to create interview against closed - job opening",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Interview",
  "script": "opening = doc.job_opening\n\nopening_status = frappe.db.get_value('Job Opening', opening, 'status')\n\nif opening_status=='Closed':\n    opening_link = frappe.utils.get_link_to_form(\"Job Opening\", opening)\n    error_message = 'Cannot schedule a interview against a closed Job Opening: ' + opening_link\n    frappe.throw(error_message)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-02 17:03:57.604957",
  "module": "Sanskar HRMS",
  "name": "Update Job applicant status as 'Offer Given' when job offer is saved",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Offer",
  "script": "if doc.status=='Awaiting Response':\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_round', 'Job Offer')\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'custom_interview_status', 'Offer Given')\n    frappe.db.set_value('Job Applicant', doc.job_applicant, 'status', 'Job Offer - Given')",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Delete",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-02 16:09:06.009125",
  "module": "Sanskar HRMS",
  "name": "Update Job applicant status when 'Awaiting Response'  Job Offer is deleted",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Offer",
  "script": "if doc.status == 'Awaiting Response':\n    \n    last_interview = frappe.db.get_list(\"Interview\", filters={\"job_applicant\": doc.job_applicant, \"docstatus\": [\"!=\", 2]}, order_by=\"creation desc\", limit=1)\n\n    # frappe.msgprint(str(interview_exists))\n    \n    if last_interview:\n        job_applicant = frappe.db.get_value('Interview',last_interview,['job_applicant'])\n        prev_status = frappe.db.get_value('Interview',last_interview,['status'])\n        prev_round = frappe.db.get_value('Interview',last_interview,['interview_round'])\n        \n        prev_status_string = f\"{prev_round} - {prev_status}\"\n        frappe.db.set_value('Job Applicant', job_applicant, 'status', prev_status_string)\n        frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_round', prev_round)\n        frappe.db.set_value('Job Applicant', job_applicant, 'custom_interview_status', prev_status)\n    \n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-16 12:17:14.504419",
  "module": "Sanskar HRMS",
  "name": "Send mail for Telephonic Round",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Applicant",
  "script": "status = doc.status\ninterview_round = doc.custom_interview_round\ninterview_status = doc.custom_interview_status\napplicant_email = doc.email_id\napplicant_name = doc.applicant_name\ndesignation = doc.designation\ncurrent_location = doc.custom_location\npreferred_location = doc.custom_preferred_location\nexperience = doc.custom_experience\nsalary_range = doc.custom_salary_range\ncurrent_ctc = doc.custom_current_ctc\nreason_for_change = doc.custom_reason_for_change\nprevious_company = doc.custom_previous_company\nnotice_period = doc.custom_notice_period\nexpected_ctc = doc.custom_expected_ctc\nrecruiter_remarks = doc.custom_remarks_by_recruiter\nresume_attachment = doc.resume_attachment\nresume_link = doc.resume_link\nholding_offer =doc.custom_holding_offer\n\nif holding_offer=='Yes':\n    offer_amount = doc.custom_offer_amount\nelse:\n    offer_amount = 'No'\n    \n\n\ndoc_link = 'https://sanskar.frappe.cloud/app/job-applicant/' + applicant_email\n\nformatted_current_ctc = frappe.utils.fmt_money(current_ctc, currency=doc.currency) \nformatted_expected_ctc = frappe.utils.fmt_money(expected_ctc, currency=doc.currency) \n\nif salary_range=='Per Year':\n    current_ctc_per = formatted_current_ctc + \" Per Year\"\n    expected_ctc_per = formatted_expected_ctc + \" Per Year\"\nelse:\n    current_ctc_per = formatted_current_ctc + \" Per Month\"\n    expected_ctc_per = formatted_expected_ctc + \" Per Month\"\n    \n\n\n\n\nif status=='Telephonic Round - Cleared':\n    \n  \n    \n    is_recruiter = False\n    user_doc = frappe.get_doc('User', frappe.session.user)\n    for r in user_doc.roles:\n        user_role = r.role\n        if user_role == 'Recruiter':\n            is_recruiter = True\n            break\n        \n    \n    if is_recruiter == True:\n        \n        recruiter_mail = frappe.session.user\n        \n        # Get hr manager email id based on recruiter reports to field\n        recruit_reports_to = frappe.db.get_value('Employee', {'user_id': recruiter_mail}, ['reports_to'])\n        \n        hr_manager_mail = frappe.db.get_value('Employee', recruit_reports_to, ['user_id'])\n        \n        # frappe.msgprint(f' Recruiter: { recruiter_mail }')\n        # frappe.msgprint(f'HR Manager: { hr_manager_mail }')\n        \n        sender_name = frappe.db.get_value('User', frappe.session.user, 'full_name')\n        mail_subject = f\"Applicant Approval Notification - {applicant_name}\"\n\n        if resume_attachment:\n            \n            email_template = frappe.render_template(\"sanskar_hrms/templates/emails/approval_to_hr.html\", \n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t 'interview_round': interview_round,\n\t\t\t\t\t\t\t\t\t\t 'applicant_name': applicant_name,\n\t\t\t\t\t\t\t\t\t\t 'designation': designation,\n\t\t\t\t\t\t\t\t\t\t 'status': status,\n\t\t\t\t\t\t\t\t\t\t 'current_location': current_location,\n\t\t\t\t\t\t\t\t\t\t 'preferred_location': preferred_location,\n\t\t\t\t\t\t\t\t\t\t 'experience': experience,\n\t\t\t\t\t\t\t\t\t\t 'offer_amount': offer_amount,\n\t\t\t\t\t\t\t\t\t\t 'current_ctc': current_ctc_per,\n\t\t\t\t\t\t\t\t\t\t 'reason_for_change': reason_for_change,\n\t\t\t\t\t\t\t\t\t\t 'previous_company': previous_company,\n\t\t\t\t\t\t\t\t\t\t 'notice_period': notice_period,\n\t\t\t\t\t\t\t\t\t\t 'expected_ctc': expected_ctc_per,\n\t\t\t\t\t\t\t\t\t\t 'recruiter_remarks': recruiter_remarks,\n\t\t\t\t\t\t\t\t\t\t 'resume_attachment': resume_attachment,\n\t\t\t\t\t\t\t\t\t\t 'doc_link': doc_link\n\t\t\t\t\t\t\t\t\t\t })\n            \n            \n            \n            \n            frappe.call(\"frappe.core.doctype.communication.email.make\", \n                sender= recruiter_mail,\n                sender_full_name= sender_name,\n                recipients= hr_manager_mail,\n                subject= mail_subject,\n                content= email_template,\n                send_email= 1,\n                communication_medium= \"Email\"\n            )\n            \n            \n        else:\n            email_template = frappe.render_template(\"sanskar_hrms/templates/emails/approval_to_hr.html\", \n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t 'interview_round': interview_round,\n\t\t\t\t\t\t\t\t\t\t 'applicant_name': applicant_name,\n\t\t\t\t\t\t\t\t\t\t 'designation': designation,\n\t\t\t\t\t\t\t\t\t\t 'status': status,\n\t\t\t\t\t\t\t\t\t\t 'current_location': current_location,\n\t\t\t\t\t\t\t\t\t\t 'preferred_location': preferred_location,\n\t\t\t\t\t\t\t\t\t\t 'experience': experience,\n\t\t\t\t\t\t\t\t\t\t 'offer_amount': offer_amount,\n\t\t\t\t\t\t\t\t\t\t 'current_ctc': current_ctc_per,\n\t\t\t\t\t\t\t\t\t\t 'reason_for_change': reason_for_change,\n\t\t\t\t\t\t\t\t\t\t 'previous_company': previous_company,\n\t\t\t\t\t\t\t\t\t\t 'notice_period': notice_period,\n\t\t\t\t\t\t\t\t\t\t 'expected_ctc': expected_ctc_per,\n\t\t\t\t\t\t\t\t\t\t 'recruiter_remarks': recruiter_remarks,\n\t\t\t\t\t\t\t\t\t\t 'resume_link': resume_link,\n\t\t\t\t\t\t\t\t\t\t 'doc_link': doc_link\n\t\t\t\t\t\t\t\t\t\t })\n            \n            frappe.call(\"frappe.core.doctype.communication.email.make\", \n                sender= recruiter_mail,\n                sender_full_name= sender_name,\n                recipients= hr_manager_mail,\n                subject= mail_subject,\n                content= email_template,\n                send_email= 1,\n                communication_medium= \"Email\"\n            )\n            \n            \n \n        \n    \n\n\n\n\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "status_notification",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-05-10 15:17:39.171968",
  "module": "Sanskar HRMS",
  "name": "Send applicant approval status to recruiter",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "applicant_name = frappe.form_dict[\"applicant_name\"]\ninterview_round = frappe.form_dict[\"interview_round\"]\ninterview_status = frappe.form_dict[\"interview_status\"]\ndoc_link = frappe.form_dict[\"doc_link\"]\nrecruiter_mail = frappe.form_dict[\"recruiter_mail\"]\nsender = frappe.form_dict[\"sender\"]\nmail_subject = frappe.form_dict[\"mail_subject\"]\n\nsender_name = frappe.db.get_value('User', sender, 'full_name')\n\n\nemail_template = frappe.render_template(\"sanskar_hrms/templates/emails/approval_status.html\", \n\t\t\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t\t\t 'interview_round': interview_round,\n\t\t\t\t\t\t\t\t\t\t 'interview_status': interview_status,\n\t\t\t\t\t\t\t\t\t\t 'job_applicant': applicant_name,\n\t\t\t\t\t\t\t\t\t\t 'doc_link': doc_link\n\t\t\t\t\t\t\t\t\t\t })\n\n\nfrappe.call(\"frappe.core.doctype.communication.email.make\", \n                sender= sender,\n                sender_full_name= sender_name,\n                recipients= recruiter_mail,\n                subject= mail_subject,\n                content= email_template,\n                send_email= 1,\n                communication_medium= \"Email\"\n            )\n",
  "script_type": "API"
 }
]